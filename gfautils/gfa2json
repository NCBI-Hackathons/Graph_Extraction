#!/usr/bin/perl
use strict 'subs';
use warnings;

use threads;
use threads::shared;

use Getopt::Long;
use Pod::Usage;
use Storable qw(dclone);

use JSON;

# Setup options for modules
Getopt::Long::Configure (
    'auto_abbrev',                      # Allows truncation of options
    'gnu_compat'                        # Allows --opt=BLA syntax and --opt "BLA"
);

my @nodes;
my @edges;
my $procs = 1;
my $sensitive = 0;
my $seqLabel = 0;

my %jg = ("graphs" => []);
my %graph;

GetOptions (
    'sensitive'     => \$sensitive,
    'seqlabel'      => \$seqLabel,
    'help'          => \$help,
)
    or die pod2usage(                   # Print documentation and quit if bad opts
    -exitval => $help,              # With return value 0 if $help was not set
    -verbose => 2                   # Print all the sections
);

unless ($sensitive) {
    $SIG{'INT'} = \&end;
    $SIG{'QUIT'} = \&end;
}

my $lineno = 0;
while (<>) {
    $lineno++;
# # 	Comment
    next if /^#/;
# H 	Header
    if (/^H/) {
        $graph{"nodes"} = \@nodes;
        $graph{"edges"} = \@edges;
        push @{$jg{"graphs"}}, dclone \%graph;
        %graph = (
            directed    =>  1,
            metadata    => {
                paths    => [],
            },
        );
        @nodes = [];
        @edges = [];
        next;
    }
# S 	Segment
    if (/^S\t(\S*)\t(\*|[A-Za-z=.]+)/) {
        my %node = (
            id => $1,
            metadata => {
                group => "default",
                sequence => $2,
            },
            label => $seqLabel?$2:$1,
        );
        if (/LN:i:(\d*)/) {
            $node{metadata}{"length"} = $2;
        }
        push @nodes, \%node;
        next;
    }
# L 	Link
    if (/^L/) {
        my @L = split /\t/;
        my %edge = (
            source => $L[1],
            target => $L[3],
            metadata => {
                value => 1,
                sourceOrientation  => $L[2],
                targetOrientation  => $L[4],
            },
        );
        push @edges, \%edge;
        next;
    }
# C 	Containment
    next if /^C/;
# P 	Path
    if (/^P/) {
        my @L = split /\t/;
        my $label = $L[1];
        my @nodes = split /,/, $L[2];
        my $prev_node = pop @nodes;
        my @path = [];
        while (my $curr_node = pop @nodes) {
            $prev_node . ' ' . $curr_node =~ /(.*?)([+\-]) (.*?)([+\-])/;
            my %edge = (
                source => $1,
                target => $3,
                label => $label,
                metadata => }
                    value => 1,
                    sourceOrientation  => $2,
                    targetOrientation  => $4,
                },
            );
            push @edges, \%edge;
            push @path, \%edge;
            $prev_node = $curr_node;
        }
        push @{$graph{metadata}{paths}}, @path;
        next;
    }
    warn "Unrecognized line format at line $lineno\n";
}
sub end {
    $graph{"nodes"} = \@nodes;
    $graph{"edges"} = \@edges;
    push @{$jg{"graphs"}}, dclone \%graph;
    shift @{$jg{"graphs"}};
    print encode_json \%jg;
    exit(0);
}
END { &end; }
