#!/usr/bin/perl
use strict 'subs';
use warnings;

use threads;
use threads::shared;

use Getopt::Long;
use Pod::Usage;
use Thread::Queue;

use JSON;

# Setup options for modules
Getopt::Long::Configure (
    'auto_abbrev',                      # Allows truncation of options
    'gnu_compat'                        # Allows --opt=BLA syntax and --opt "BLA"
);

my @nodes :shared;
my @edges :shared;
my $procs = 1;
my $sensitive = 0;
my $seqLabel = 0;

my %jg = ("graph" => {});

GetOptions (
    'processes:+'   => \$procs,
    'sensitive'     => \$sensitive,
    'seqlabel'      => \$seqLabel,
    'help'          => \$help,
)
    or die pod2usage(                   # Print documentation and quit if bad opts
        -exitval => $help,              # With return value 0 if $help was not set
        -verbose => 2                   # Print all the sections
);

unless ($sensitive) {
	$SIG{'INT'} = \&end;
	$SIG{'QUIT'} = \&end;
}

# Threading initialization section
my $queue = Thread::Queue->new();       # Queue feeds URLs to download to workers
threads->create(\&worker)               # Create $procs download threads
    for 1 .. $procs;

while (<>) {
	$queue->enqueue($_);
}

$queue->end;

$_->join() foreach threads->list;

sub worker {
	while ($_ = $queue->dequeue) {
# # 	Comment
		next if /^#/;
# H 	Header
		next if /^H/;
# S 	Segment
		if (/^S\t(\S*)\t(\*|[A-Za-z=.]+)/) {
			my %node :shared;
			$node{"id"} = $1;
			my @metadata :shared;
			my %value :shared;
			$value{"group"} = "default";
			push @metadata, \%value;
			if ($seqLabel) {
				$node{"label"} = $2;
			} else {
				$node{"label"} = $node{"id"};
			}
			my %sequence :shared;
			$sequence{"sequence"} = $2;
			push @metadata, \%sequence;
			if (/LN:i:(\d*)/) {
			my %length :shared;
			$length{"length"} = $2;
			push @metadata, \%length;
			}
			$node{"metadata"} = \@metadata;
			lock(@nodes);
			push @nodes, \%node;
			next;
		}
# L 	Link
		if (/^L/) {
			my @L = split /\t/;
			my %edge :shared;
			$edge{"source"} = $L[1];
			$edge{"target"} = $L[3];
			my @metadata :shared;
			my %value :shared;
			$value{"value"} = 1;
			push @metadata, \%value;
			$edge{"metadata"} = \@metadata;
			lock(@edges);
			push @edges, \%edge;
			next;
		}
# C 	Containment
		next if /^C/;
# P 	Path
		if (/^P/) {
			my @L = split /\t/;
			my $label = $L[1];
			my @nodes = split /[+\-],/, $L[2]; # Throws out orientation
			my $prev_node = pop @nodes;
			lock(@edges);
			while (my $curr_node = pop @nodes) {
				my %edge :shared;
				$edge{"source"} = $prev_node;
				$edge{"target"} = $curr_node;
				$edge{"label"} = $label;
				my @metadata :shared;
				my %value :shared;
				$value{"value"} = 1;
				push @metadata, \%value;
				$edge{"metadata"} = \@metadata;
				push @edges, \%edge;
				$prev_node = $curr_node;
			}
		}
		warn "Unrecognized line format!\n";
	}
}
sub end {
	$jg{"graph"}{"nodes"} = \@nodes;
	$jg{"graph"}{"edges"} = \@edges;
	print encode_json \%jg;
	exit(0);
}
END { &end; }
